{"version":3,"sources":["webpack:///src/app/modules/dashboard/pages/orders/order.service.ts"],"names":["options","headers","OrderService","httpClient","pagination","post","pipe","data","error","id","get","toString","order","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAUA,QAAMA,OAAO,GAAG;AACdC,aAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,wBAAgB;AADO,OAAhB;AADK,KAAhB;;QAUaC,Y;;;AAEX,4BAAoBC,UAApB,EAA4C;AAAA;;AAAxB,aAAAA,UAAA,GAAAA,UAAA;AAA0B;;;;kCAG5CC,U,EAAsB;AAEtB,iBAAO,KAAKD,UAAL,CACJE,IADI,CACC,cADD,EACiBD,UADjB,EAC6BJ,OAD7B,EAEJM,IAFI,CAGH,2DAAI,UAACC,IAAD,EAAkC;AACpC,mBAAOA,IAAP;AACD,WAFD,CAHG,EAMH,kEAAW,UAACC,KAAD,EAAW;AACpB,mBAAO,wDAAW,sBAAX,CAAP;AACD,WAFD,CANG,CAAP;AAUD;;;sCAECJ,U,EAA0B;AAE1B,iBAAO,KAAKD,UAAL,CACJE,IADI,CACC,kBADD,EACqBD,UADrB,EACiCJ,OADjC,EAEJM,IAFI,CAGH,2DAAI,UAACC,IAAD,EAAkC;AACpC,mBAAOA,IAAP;AACD,WAFD,CAHG,EAMH,kEAAW,UAACC,KAAD,EAAW;AACpB,mBAAO,wDAAW,sBAAX,CAAP;AACD,WAFD,CANG,CAAP;AAUD;;;iCAGCC,E,EAAS;AAET,iBAAO,KAAKN,UAAL,CACJO,GADI,CACA,WAASD,EAAE,CAACE,QAAH,EADT,EACwBX,OADxB,EAEJM,IAFI,CAGH,2DAAI,UAACC,IAAD,EAAiB;AACnB,mBAAOA,IAAP;AACD,WAFD,CAHG,EAMH,kEAAW,UAACC,KAAD,EAAW;AACpB,mBAAO,wDAAW,sBAAX,CAAP;AACD,WAFD,CANG,CAAP;AAUD;;;oCAICI,K,EAAY;AAEZ,iBAAO,KAAKT,UAAL,CACJE,IADI,CACC,QADD,EACWO,KADX,EACmBZ,OADnB,EAEJM,IAFI,CAGH,2DAAI,UAACC,IAAD,EAAuB;AACzB,mBAAOA,IAAP;AACD,WAFD,CAHG,EAMH,kEAAW,UAACC,KAAD,EAAW;AACpB,mBAAO,wDAAW,sBAAX,CAAP;AACD,WAFD,CANG,CAAP;AAUD;;;;;;;uBA9DUN,Y,EAAY,uH;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACVW,oBAAU,EAAE;AADF,S;AAGa,Q","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport {\r\n  AgentsPaginationResult, AgentUser,\r\n  DriversPaginationResult, Order, OrderResult, OrdersPaginationResult,\r\n  Pagination, PaginationUser, SupportsPaginationResult, SupportUser, User,\r\n} from '../../../../@core/models/data-objects';\r\n\r\nconst options = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n  }),\r\n  // observe: 'response'\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  public getOrders(\r\n    pagination: Pagination\r\n  ): Observable<OrdersPaginationResult> {\r\n    return this.httpClient\r\n      .post('order/Orders', pagination, options)\r\n      .pipe(\r\n        map((data: OrdersPaginationResult) => {\r\n          return data;\r\n        }),\r\n        catchError((error) => {\r\n          return throwError('Errrorrrr not found!');\r\n        })\r\n      );\r\n  }\r\n  public getUserOrders(\r\n    pagination: PaginationUser\r\n  ): Observable<OrdersPaginationResult> {\r\n    return this.httpClient\r\n      .post('order/userOrders', pagination, options)\r\n      .pipe(\r\n        map((data: OrdersPaginationResult) => {\r\n          return data;\r\n        }),\r\n        catchError((error) => {\r\n          return throwError('Errrorrrr not found!');\r\n        })\r\n      );\r\n  }\r\n\r\n  public getOrder(\r\n    id:number\r\n  ): Observable<Order> {\r\n    return this.httpClient\r\n      .get('order/'+id.toString(), options)\r\n      .pipe(\r\n        map((data: Order) => {\r\n          return data;\r\n        }),\r\n        catchError((error) => {\r\n          return throwError('Errrorrrr not found!');\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n  public submitOrder(\r\n    order: Order\r\n  ): Observable<OrderResult> {\r\n    return this.httpClient\r\n      .post('order/', order , options)\r\n      .pipe(\r\n        map((data: OrderResult) => {\r\n          return data;\r\n        }),\r\n        catchError((error) => {\r\n          return throwError('Errrorrrr not found!');\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n}\r\n"]}